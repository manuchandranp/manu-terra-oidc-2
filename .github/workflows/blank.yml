name: "Artifactory Generic OIDC Multi-Job"
on:
  workflow_dispatch:
  push:
    # branches:
    # - feature/*
env:
  OIDC_PROVIDER: 'manu-new'
  OIDC_AUDIENCE: 'newmanu'
  JF_URL: "https://hts2.jfrog.io"
permissions:
  contents: read
  id-token: write
jobs:
  publish-artifact:
    runs-on: ubuntu-latest
    outputs:
      access_token: ${{ steps.exchange_token.outputs.ACCESS_TOKEN }}  # Set output for access token
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Fetch OIDC Token
        id: fetch_oidc_token
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ env.JF_URL }}
        with:
          oidc-provider-name: ${{ env.OIDC_PROVIDER }}
          oidc-audience: ${{ env.OIDC_AUDIENCE }}
      - name: Get ID Token
        id: get_id_token
        run: |
          ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=github" | jq .value | tr -d '"')
          echo "ID_TOKEN=${ID_TOKEN}" >> $GITHUB_ENV
      - name: Exchange token with access
        id: exchange_token  # Added an ID for this step
        env:
          ID_TOKEN: ${{ env.ID_TOKEN }}
          JFROG_PLATFORM_URL: ${{ env.JF_URL }}
        run: |
          ACCESS_TOKEN=$(curl -XPOST -H "Content-Type: application/json" "https://hts2.jfrog.io/access/api/v1/oidc/token" -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"${ID_TOKEN}\", \"provider_name\": \"manu-new\"}" | jq .access_token | tr -d '"')
          echo "::set-output name=ACCESS_TOKEN::${ACCESS_TOKEN}"  # Pass the access token as output
       # --- Publishing a Terraform Module ---
      # Artifactory requires the module to be packed into a ZIP file 
      - name: Archive Terraform Module
        run: |
          # Example: zip up your module source files
          MODULE_VERSION=${{ github.ref_name }}
          MODULE_NAME='vpc' # e.g., my-module-name
          MODULE_NAMESPACE='myorg' # e.g., your-namespace
          
          # Create the required zip file name: <MODULE_NAME>-<PROVIDER_NAME>-<VERSION>.zip
          # Assuming 'aws' is the provider. Adjust as needed.
          ZIP_FILE="${MODULE_NAME}-aws-${MODULE_VERSION}.zip"
          zip -r $ZIP_FILE . -x '*.git*'
          echo "ZIPPING complete. File: $ZIP_FILE"
          echo "MODULE_NAMESPACE=$MODULE_NAMESPACE" >> $GITHUB_ENV
          echo "MODULE_NAME=$MODULE_NAME" >> $GITHUB_ENV
          echo "MODULE_VERSION=$MODULE_VERSION" >> $GITHUB_ENV
          echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV
          echo "ls -la"
          echo "pwd"
      - name: Publish Terraform Module to Artifactory
        # The JFrog CLI command to publish a module
        run: |
          #jf rt u ${{ env.MODULE_NAME }}/${{ env.MODULE_NAMESPACE }}/aws/${{ env.MODULE_VERSION }}/${{ env.ZIP_FILE }} manu-terra-virtual
          jf rt u vpc-aws-main.zip manu-terra-virtual
  download-artifact:
    needs: publish-artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download File from JFrog Repo
        env:
          ACCESS_TOKEN: ${{ needs.publish-artifact.outputs.access_token }}  # Access the output token from the previous job
          JF_URL: ${{ env.JF_URL }}
        run: |
          curl -H "Authorization: Bearer ${ACCESS_TOKEN}" -O "${JF_URL}/artifactory/manu-perm-test/package.json"

        # STEP 3: Setup JFrog CLI and Configure with Token
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4  
      - name: Explicitly Configure JFrog Server (jf c add)
        env:
          ACCESS_TOKEN: ${{ steps.exchange_token.outputs.ACCESS_TOKEN }} 
          
        run: |
          # DIAGNOSTIC: Check if $ACCESS_TOKEN is available here.
          # If this prints empty, the token is not being passed correctly to the step env.
          echo "Token check in config step (first 10 chars): ${ACCESS_TOKEN:0:10}..."

          # This command adds the server configuration, including the access token.
          # It is crucial that this token is not empty.
          jf c add jfrog-server \
            --url ${{ env.JF_URL }} \
            --access-token ${ACCESS_TOKEN} \
            --overwrite  
          
          # This should show the server is configured with a token.
          jf c show   
      - name: Verify Authentication
        env:
          ACCESS_TOKEN: ${{ needs.publish-artifact.outputs.access_token }}
          JF_URL: ${{ env.JF_URL }}
        run: |
          echo "Verifying authentication with JFrog..."
          jf rt ping --server-id jfrog-server
          echo "Attempting to retrieve configuration for target repository: ${{ env.MODULE_REPO_KEY }}"
          jf rt curl -XGET "/api/repositories/${{ env.MODULE_REPO_KEY }}" --server-id jfrog-server  
