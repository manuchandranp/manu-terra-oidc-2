name: "Artifactory Generic OIDC Multi-Job"
on:
  workflow_dispatch:
  push:
    # branches:
    # - feature/*
env:
  OIDC_PROVIDER: 'manu-new'
  OIDC_AUDIENCE: 'newmanu'
  JFROG_URL: "https://hts2.jfrog.io"
  MODULE_REPO_KEY: 'manu-terra-module'
  MODULE_NAMESPACE: 'mycompany'
  MODULE_PROVIDER: 'aws'
  MODULE_NAME: 'my-vpc-module'
permissions:
  contents: read
  id-token: write
jobs:
  publish-module:
    runs-on: ubuntu-latest
    outputs:
      access_token: ${{ steps.exchange_token.outputs.ACCESS_TOKEN }} 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Get ID Token
        id: get_id_token
        run: |
          # Fetch the GitHub ID Token with a 'github' audience.
          ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=github" | jq .value | tr -d '"')
          echo "ID_TOKEN=${ID_TOKEN}" >> $GITHUB_ENV
          
      - name: Exchange token with access
        id: exchange_token 
        env:
          ID_TOKEN: ${{ env.ID_TOKEN }}
          JFROG_PLATFORM_URL: ${{ env.JFROG_URL }}
        run: |
          # Exchange the GitHub ID Token for a JFrog Access Token.
          ACCESS_TOKEN=$(curl -XPOST -H "Content-Type: application/json" "${JFROG_PLATFORM_URL}/access/api/v1/oidc/token" -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"${ID_TOKEN}\", \"provider_name\": \"${{ env.OIDC_PROVIDER }}\"}" | jq .access_token | tr -d '"')
          
          # Use the modern way to set output variables
          echo "ACCESS_TOKEN=${ACCESS_TOKEN}" >> $GITHUB_OUTPUT
          
      # ------------------------------------------------------------------
      # STEP 3: Setup JFrog CLI and Configure with Token
      # ------------------------------------------------------------------
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          access-token: ${{ steps.exchange_token.outputs.ACCESS_TOKEN }}
          url: ${{ env.JFROG_URL }}
      - name: Explicitly Configure JFrog Server (jf c add)
        # FIX: Manually adding the server configuration using 'jf c add' 
        # to guarantee the 'jfrog-server' ID is available in subsequent steps.
        run: |
          jf c add jfrog-server \
            --url ${{ env.JFROG_URL }} \
            --access-token ${{ steps.exchange_token.outputs.ACCESS_TOKEN }} \
            --overwrite    
          #server-id: 'jfrog-server' # Explicitly define a known server ID
          # This step configures the server, making 'jfrog-server' available.

      # ------------------------------------------------------------------
      # STEP 4: Publish the Module
      # ------------------------------------------------------------------
      - name: Get Tag Version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: Verify Artifactory Connection and Repository
        # DIAGNOSTIC STEP: Check if the connection works and if the repository is visible to the authenticated user.
        run: |
          echo "Verifying connection and listing repositories for server 'jfrog-server'..."
          # List all repositories to see what is visible
      
          
          # Check for the specific repository's details
          echo "Attempting to retrieve configuration for target repository: ${{ env.MODULE_REPO_KEY }}"
          # This command will return 200 (OK) if the repo exists and is accessible, or fail otherwise.
          jf rt curl -XGET "/api/repositories/${{ env.MODULE_REPO_KEY }}"
        
      - name: Configure JFrog CLI for Terraform
        # FIX: Removed the failing 'jf c use' and re-added the explicit --server-id-deploy flag.
        # This tells the 'terraform-config' command to use the server configuration 
        # that was created in the previous step.
        run: |
          jf terraform-config \
            --repo-deploy ${{ env.MODULE_REPO_KEY }} \
            --server-id-deploy jfrog-server # <--- Explicitly use the named server config
          
      - name: Publish Terraform Module
        # This command will now use the repository configured in the step above
        run: |
          jf tf p \
            --namespace ${{ env.MODULE_NAMESPACE }} \
            --provider ${{ env.MODULE_PROVIDER }} \
            --tag v${{ steps.get_version.outputs.VERSION }} \
            --module ${{ env.MODULE_NAME }}
