name: "Artifactory Generic OIDC Multi-Job"
on:
  workflow_dispatch:
  push:
    # branches:
    # - feature/*
env:
  OIDC_PROVIDER: 'manu-new'
  OIDC_AUDIENCE: 'newmanu'
  JFROG_URL: "https://hts2.jfrog.io"
  MODULE_REPO_KEY: 'manu-terra-module'
  MODULE_NAMESPACE: 'mycompany'
  MODULE_PROVIDER: 'aws'
  MODULE_NAME: 'my-vpc-module'
permissions:
  contents: read
  id-token: write
jobs:
  publish-module:
    runs-on: ubuntu-latest
    outputs:
      # Set output for access token (This is correctly referencing the 'exchange_token' step ID)
      access_token: ${{ steps.exchange_token.outputs.ACCESS_TOKEN }} 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      # You can skip this step as 'Get ID Token' does this explicitly below.
      # - name: Fetch OIDC Token
      #   id: fetch_oidc_token
      #   uses: jfrog/setup-jfrog-cli@v4
      #   env:
      #     JF_URL: ${{ env.JF_URL }}
      #   with:
      #     oidc-provider-name: ${{ env.OIDC_PROVIDER }}
      #     oidc-audience: ${{ env.OIDC_AUDIENCE }}

      - name: Get ID Token
        id: get_id_token
        run: |
          # Fetch the GitHub ID Token with a 'github' audience.
          ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=github" | jq .value | tr -d '"')
          echo "ID_TOKEN=${ID_TOKEN}" >> $GITHUB_ENV
          
      - name: Exchange token with access
        id: exchange_token # Step ID used for outputting the token
        env:
          ID_TOKEN: ${{ env.ID_TOKEN }}
          JFROG_PLATFORM_URL: ${{ env.JFROG_URL }}
        run: |
          # Exchange the GitHub ID Token for a JFrog Access Token.
          ACCESS_TOKEN=$(curl -XPOST -H "Content-Type: application/json" "${JFROG_PLATFORM_URL}/access/api/v1/oidc/token" -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"${ID_TOKEN}\", \"provider_name\": \"${{ env.OIDC_PROVIDER }}\"}" | jq .access_token | tr -d '"')
          
          # Use the modern way to set output variables
          echo "ACCESS_TOKEN=${ACCESS_TOKEN}" >> $GITHUB_OUTPUT
          
      # ------------------------------------------------------------------
      # STEP 3: Setup JFrog CLI and Configure with Token
      # NOTE: This step was modified to use the correct step ID for ACCESS_TOKEN
      # FIX: Added 'server-id' to explicitly name the server configuration.
      # ------------------------------------------------------------------
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          # Use the token output from the exchange_token step
          access-token: ${{ steps.exchange_token.outputs.ACCESS_TOKEN }}
          url: ${{ env.JFROG_URL }}
          server-id: 'jfrog-server' # <--- NEW: Explicitly define a known server ID

      # ------------------------------------------------------------------
      # STEP 4: Publish the Module
      # ------------------------------------------------------------------
      - name: Get Tag Version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Configure JFrog CLI for Terraform
        # FIX: Added --server-id-deploy flag to specify which configured server to use for deployment.
        run: |
          jf terraform-config \
          --repo-deploy ${{ env.MODULE_REPO_KEY }} \
          --server-id-deploy jfrog-server # <--- NEW: Using the defined server ID
          
      - name: Publish Terraform Module
        # This command correctly uses all the module metadata flags.
        run: |
          jf tf p \
            --repo-deploy ${{ env.MODULE_REPO_KEY }} \
            --namespace ${{ env.MODULE_NAMESPACE }} \
            --provider ${{ env.MODULE_PROVIDER }} \
            --tag v${{ steps.get_version.outputs.VERSION }} \
            --module ${{ env.MODULE_NAME }}
