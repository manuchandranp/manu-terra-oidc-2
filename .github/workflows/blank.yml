name: "Artifactory Generic OIDC Multi-Job"
on:
  workflow_dispatch:
  push:
    # branches:
    # - feature/*
env:
  OIDC_PROVIDER: 'manu-new'
  OIDC_AUDIENCE: 'newmanu'
  JF_URL: "https://hts2.jfrog.io"
  # Placeholder Environment Variables (Update these for your project)
  MODULE_REPO_KEY: 'terraform-local'
  MODULE_NAMESPACE: 'my-namespace'
  MODULE_PROVIDER: 'my-provider'
  MODULE_NAME: 'vpc'

permissions:
  contents: read
  id-token: write

jobs:
  publish-artifact:
    runs-on: ubuntu-latest
    outputs:
      # Access token is outputted for potential subsequent jobs
      access_token: ${{ steps.exchange_token.outputs.ACCESS_TOKEN }} 
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ------------------------------------------------------------------
      # STEP 1: Get ID Token and Exchange for Access Token
      # ------------------------------------------------------------------
      - name: Fetch OIDC Token (Setup JFrog CLI for token exchange)
        id: fetch_oidc_token
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ env.JF_URL }}
        with:
          oidc-provider-name: ${{ env.OIDC_PROVIDER }}
          oidc-audience: 'newmanu'

      - name: Get ID Token
        id: get_id_token
        run: |
          # Fetch the ID Token from GitHub OIDC
          ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=github" | jq .value | tr -d '"')
          echo "ID_TOKEN=${ID_TOKEN}" >> $GITHUB_ENV

      - name: Exchange token with access
        id: exchange_token  # ID used to reference token output
        env:
          ID_TOKEN: ${{ env.ID_TOKEN }}
          JFROG_PLATFORM_URL: ${{ env.JF_URL }}
        run: |
          # Exchange the GitHub ID Token for an Artifactory Access Token
          RESPONSE=$(curl -s -XPOST -H "Content-Type: application/json" "${{ env.JF_URL }}/access/api/v1/oidc/token" -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"${ID_TOKEN}\", \"provider_name\": \"manu-new\"}")
          
          # DIAGNOSTIC: Print the full response to check for errors/token
          echo "Token Exchange Response (may contain sensitive data): ${RESPONSE}"
          
          ACCESS_TOKEN=$(echo "${RESPONSE}" | jq .access_token | tr -d '"')
          
          # CRITICAL CHECK: Fail if no access token is retrieved
          if [ -z "$ACCESS_TOKEN" ]; then
            echo "::error::Failed to retrieve Artifactory Access Token. Check provider name and permissions."
            exit 1
          fi
          
          # Set output for use by subsequent steps and jobs
          echo "::set-output name=ACCESS_TOKEN::${ACCESS_TOKEN}" 


      
      - name: Setup JFrog CLI (redundant, but good practice)
        uses: jfrog/setup-jfrog-cli@v4
        # Note: We are setting up the server explicitly below, so passing the token here isn't strictly necessary.

      - name: Explicitly Configure JFrog Server (jf c add)
        env:
          # CORRECTED: Access token from the previous step's output
          ACCESS_TOKEN: ${{ steps.exchange_token.outputs.ACCESS_TOKEN }} 
        
        run: |
          # Verify that the token is present before configuration
          echo "Configuring JFrog CLI with Access Token
